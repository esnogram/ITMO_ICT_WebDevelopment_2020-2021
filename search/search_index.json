{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"endpoint/chosen_materials/","text":"ChosenMaterials \u041c\u043e\u0434\u0435\u043b\u044c: models.py class ChosenMaterials(models.Model): material = models.ForeignKey('MaterialsPL', verbose_name='\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b', on_delete=models.CASCADE) req = models.ForeignKey('Request', verbose_name='\u0417\u0430\u044f\u0432\u043a\u0430', on_delete=models.CASCADE) total_cost = models.CharField(max_length=30, verbose_name='\u041e\u0431\u0449\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432') amount = models.IntegerField(verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432(\u0448\u0442.)') \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432: serializer.py class ChosenMaterialWMRsViewSerializer(serializers.ModelSerializer): material = serializers.StringRelatedField(read_only=True) req = serializers.StringRelatedField(read_only=True) class Meta: model = ChosenMaterials fields = \"__all__\" views.py class ChosenMaterialsListAPIView(generics.ListAPIView): serializer_class = ChosenMaterialWMRsViewSerializer def get_queryset(self): queryset = ChosenMaterials.objects.all() params = self.request.query_params req = params.get('req', None) if req: queryset = queryset.filter(req=req) return queryset urls.py urlpatterns = [ ... path('chosenmaterials/', ChosenMaterialsListAPIView.as_view()), ... ] \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432: serializer.py class ChosenMaterialsCreateSerializer(serializers.Serializer): material = serializers.PrimaryKeyRelatedField(queryset=MaterialsPL.objects.all()) req = serializers.PrimaryKeyRelatedField(queryset=Request.objects.all()) total_cost = serializers.CharField(max_length=30) amount = serializers.IntegerField() def create(self, validated_data): chosen_materials = ChosenMaterials(**validated_data) chosen_materials.save() return ChosenMaterials(**validated_data) views.py class ChosenMaterialsCreateAPIView(generics.CreateAPIView): queryset = ChosenMaterials.objects.all() serializer_class = ChosenMaterialsCreateSerializer urls.py urlpatterns = [ ... path('chosenmaterials/create/', ChosenMaterialsCreateAPIView.as_view()), ... ] \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u043f\u043e id: serializer.py class ChosenMaterialsViewSerializer(serializers.ModelSerializer): class Meta: model = ChosenMaterials fields = \"__all__\" views.py class ChosenMaterialsRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = ChosenMaterials.objects.all() serializer_class = ChosenMaterialsViewSerializer urls.py urlpatterns = [ ... path('chosenmaterials/<int:pk>/', ChosenMaterialsRUDAPIView.as_view()), ... ] \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c\u0438: serializer.py class ChosenMaterialsNestedSerializer(serializers.ModelSerializer): req = RequestNestedSerializer() material = MaterialsPLViewSerializer() class Meta: model = ChosenMaterials fields = \"__all__\" views.py class ChosenMaterialsFullListAPIView(generics.ListAPIView): queryset = ChosenMaterials.objects.all() serializer_class = ChosenMaterialsNestedSerializer urls.py urlpatterns = [ ... path('chosenmaterials/full/', ChosenMaterialsFullListAPIView.as_view()), ... ]","title":"Chosen Materials"},{"location":"endpoint/chosen_materials/#chosenmaterials","text":"","title":"ChosenMaterials"},{"location":"endpoint/chosen_materials/#_1","text":"models.py class ChosenMaterials(models.Model): material = models.ForeignKey('MaterialsPL', verbose_name='\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b', on_delete=models.CASCADE) req = models.ForeignKey('Request', verbose_name='\u0417\u0430\u044f\u0432\u043a\u0430', on_delete=models.CASCADE) total_cost = models.CharField(max_length=30, verbose_name='\u041e\u0431\u0449\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432') amount = models.IntegerField(verbose_name='\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432(\u0448\u0442.)')","title":"\u041c\u043e\u0434\u0435\u043b\u044c:"},{"location":"endpoint/chosen_materials/#_2","text":"serializer.py class ChosenMaterialWMRsViewSerializer(serializers.ModelSerializer): material = serializers.StringRelatedField(read_only=True) req = serializers.StringRelatedField(read_only=True) class Meta: model = ChosenMaterials fields = \"__all__\" views.py class ChosenMaterialsListAPIView(generics.ListAPIView): serializer_class = ChosenMaterialWMRsViewSerializer def get_queryset(self): queryset = ChosenMaterials.objects.all() params = self.request.query_params req = params.get('req', None) if req: queryset = queryset.filter(req=req) return queryset urls.py urlpatterns = [ ... path('chosenmaterials/', ChosenMaterialsListAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432:"},{"location":"endpoint/chosen_materials/#_3","text":"serializer.py class ChosenMaterialsCreateSerializer(serializers.Serializer): material = serializers.PrimaryKeyRelatedField(queryset=MaterialsPL.objects.all()) req = serializers.PrimaryKeyRelatedField(queryset=Request.objects.all()) total_cost = serializers.CharField(max_length=30) amount = serializers.IntegerField() def create(self, validated_data): chosen_materials = ChosenMaterials(**validated_data) chosen_materials.save() return ChosenMaterials(**validated_data) views.py class ChosenMaterialsCreateAPIView(generics.CreateAPIView): queryset = ChosenMaterials.objects.all() serializer_class = ChosenMaterialsCreateSerializer urls.py urlpatterns = [ ... path('chosenmaterials/create/', ChosenMaterialsCreateAPIView.as_view()), ... ]","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432:"},{"location":"endpoint/chosen_materials/#id","text":"serializer.py class ChosenMaterialsViewSerializer(serializers.ModelSerializer): class Meta: model = ChosenMaterials fields = \"__all__\" views.py class ChosenMaterialsRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = ChosenMaterials.objects.all() serializer_class = ChosenMaterialsViewSerializer urls.py urlpatterns = [ ... path('chosenmaterials/<int:pk>/', ChosenMaterialsRUDAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u043f\u043e id:"},{"location":"endpoint/chosen_materials/#_4","text":"serializer.py class ChosenMaterialsNestedSerializer(serializers.ModelSerializer): req = RequestNestedSerializer() material = MaterialsPLViewSerializer() class Meta: model = ChosenMaterials fields = \"__all__\" views.py class ChosenMaterialsFullListAPIView(generics.ListAPIView): queryset = ChosenMaterials.objects.all() serializer_class = ChosenMaterialsNestedSerializer urls.py urlpatterns = [ ... path('chosenmaterials/full/', ChosenMaterialsFullListAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c\u0438:"},{"location":"endpoint/chosen_services/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e ChosenServices \u041c\u043e\u0434\u0435\u043b\u044c: models.py class ChosenServices(models.Model): service = models.ForeignKey('ServicesPL', verbose_name='\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u0430\u044f \u0443\u0441\u043b\u0443\u0433\u0430', on_delete=models.CASCADE) req = models.ForeignKey('Request', verbose_name='\u0417\u0430\u044f\u0432\u043a\u0430', on_delete=models.CASCADE) total_cost = models.CharField(max_length=30, verbose_name='\u041e\u0431\u0449\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0443\u0441\u043b\u0443\u0433') \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 (\u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e req ): serializer.py class ChosenServicesWSRViewSerializer(serializers.ModelSerializer): service = serializers.StringRelatedField(read_only=True) req = serializers.StringRelatedField(read_only=True) class Meta: model = ChosenServices fields = \"__all__\" views.py class ChosenServicesListAPIView(generics.ListAPIView): serializer_class = ChosenServicesWSRViewSerializer def get_queryset(self): queryset = ChosenServices.objects.all() params = self.request.query_params req = params.get('req', None) if req: queryset = queryset.filter(req=req) return queryset urls.py urlpatterns = [ ... path('chosenservices/', ChosenServicesListAPIView.as_view()), ... ] \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432: serializer.py class ChosenServicesCreateSerializer(serializers.Serializer): service = serializers.PrimaryKeyRelatedField(queryset=ServicesPL.objects.all()) req = serializers.PrimaryKeyRelatedField(queryset=Request.objects.all()) total_cost = serializers.CharField(max_length=30) def create(self, validated_data): chosen_services = ChosenServices(**validated_data) chosen_services.save() return ChosenServices(**validated_data) views.py class ChosenServicesCreateAPIView(generics.CreateAPIView): queryset = ChosenServices.objects.all() serializer_class = ChosenServicesCreateSerializer urls.py urlpatterns = [ ... path('chosenservices/create/', ChosenServicesCreateAPIView.as_view()), ... ] \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u043f\u043e id: serializer.py class ChosenServicesViewSerializer(serializers.ModelSerializer): class Meta: model = ChosenServices fields = \"__all__\" views.py class ChosenServicesRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = ChosenServices.objects.all() serializer_class = ChosenServicesViewSerializer urls.py urlpatterns = [ ... path('chosenservices/<int:pk>/', ChosenServicesRUDAPIView.as_view()), ... ] \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c\u0438: serializer.py class ChosenServicesNestedSerializer(serializers.ModelSerializer): req = RequestNestedSerializer() service = ServicesPLWTypeViewSerializer() class Meta: model = ChosenServices fields = \"__all__\" views.py class ChosenServicesFullListAPIView(generics.ListAPIView): queryset = ChosenServices.objects.all() serializer_class = ChosenServicesNestedSerializer urls.py urlpatterns = [ ... path('chosenservices/full/', ChosenServicesFullListAPIView.as_view()), ... ]","title":"Chosen Services"},{"location":"endpoint/chosen_services/#chosenservices","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e ChosenServices"},{"location":"endpoint/chosen_services/#_1","text":"models.py class ChosenServices(models.Model): service = models.ForeignKey('ServicesPL', verbose_name='\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u0430\u044f \u0443\u0441\u043b\u0443\u0433\u0430', on_delete=models.CASCADE) req = models.ForeignKey('Request', verbose_name='\u0417\u0430\u044f\u0432\u043a\u0430', on_delete=models.CASCADE) total_cost = models.CharField(max_length=30, verbose_name='\u041e\u0431\u0449\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0443\u0441\u043b\u0443\u0433')","title":"\u041c\u043e\u0434\u0435\u043b\u044c:"},{"location":"endpoint/chosen_services/#req","text":"serializer.py class ChosenServicesWSRViewSerializer(serializers.ModelSerializer): service = serializers.StringRelatedField(read_only=True) req = serializers.StringRelatedField(read_only=True) class Meta: model = ChosenServices fields = \"__all__\" views.py class ChosenServicesListAPIView(generics.ListAPIView): serializer_class = ChosenServicesWSRViewSerializer def get_queryset(self): queryset = ChosenServices.objects.all() params = self.request.query_params req = params.get('req', None) if req: queryset = queryset.filter(req=req) return queryset urls.py urlpatterns = [ ... path('chosenservices/', ChosenServicesListAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 (\u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e req):"},{"location":"endpoint/chosen_services/#_2","text":"serializer.py class ChosenServicesCreateSerializer(serializers.Serializer): service = serializers.PrimaryKeyRelatedField(queryset=ServicesPL.objects.all()) req = serializers.PrimaryKeyRelatedField(queryset=Request.objects.all()) total_cost = serializers.CharField(max_length=30) def create(self, validated_data): chosen_services = ChosenServices(**validated_data) chosen_services.save() return ChosenServices(**validated_data) views.py class ChosenServicesCreateAPIView(generics.CreateAPIView): queryset = ChosenServices.objects.all() serializer_class = ChosenServicesCreateSerializer urls.py urlpatterns = [ ... path('chosenservices/create/', ChosenServicesCreateAPIView.as_view()), ... ]","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432:"},{"location":"endpoint/chosen_services/#id","text":"serializer.py class ChosenServicesViewSerializer(serializers.ModelSerializer): class Meta: model = ChosenServices fields = \"__all__\" views.py class ChosenServicesRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = ChosenServices.objects.all() serializer_class = ChosenServicesViewSerializer urls.py urlpatterns = [ ... path('chosenservices/<int:pk>/', ChosenServicesRUDAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u043f\u043e id:"},{"location":"endpoint/chosen_services/#_3","text":"serializer.py class ChosenServicesNestedSerializer(serializers.ModelSerializer): req = RequestNestedSerializer() service = ServicesPLWTypeViewSerializer() class Meta: model = ChosenServices fields = \"__all__\" views.py class ChosenServicesFullListAPIView(generics.ListAPIView): queryset = ChosenServices.objects.all() serializer_class = ChosenServicesNestedSerializer urls.py urlpatterns = [ ... path('chosenservices/full/', ChosenServicesFullListAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c\u0438:"},{"location":"endpoint/client/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e Client \u041c\u043e\u0434\u0435\u043b\u044c: models.py class Client(models.Model): legal_entity = models.CharField(max_length=60, verbose_name='\u042e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043b\u0438\u0446\u043e') contact_person = models.CharField(max_length=60, verbose_name='\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u043e\u0435 \u043b\u0438\u0446\u043e') phone_num = models.CharField(max_length=12, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430') email = models.EmailField(max_length=30, verbose_name='\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441') bank_details = models.CharField(max_length=30, verbose_name='\u0411\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u0438\u0435 \u0440\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b') def __str__(self): return \"{}-{}\".format(self.contact_person, self.legal_entity) \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432(\u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e legal_entity ): serializer.py class ClientViewSerializer(serializers.ModelSerializer): class Meta: model = Client fields = \"__all__\" views.py class ClientListAPIView(generics.ListAPIView): serializer_class = ClientViewSerializer def get_queryset(self): queryset = Client.objects.all() params = self.request.query_params legal_entity = params.get('legal_entity', None) if legal_entity: queryset = queryset.filter(legal_entity=legal_entity) return queryset urls.py urlpatterns = [ path('client/', ClientListAPIView.as_view()), ... ] \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: serializer.py class ClientCreateSerializer(serializers.Serializer): legal_entity = serializers.CharField(max_length=60) contact_person = serializers.CharField(max_length=60) phone_num = serializers.CharField(max_length=12) email = serializers.CharField(max_length=30) bank_details = serializers.CharField(max_length=30) def create(self, validated_data): client = Client(**validated_data) client.save() return Client(**validated_data) views.py class ClientCreateAPIView(generics.CreateAPIView): queryset = Client.objects.all() serializer_class = ClientCreateSerializer urls.py urlpatterns = [ ... path('client/create/', ClientCreateAPIView.as_view()), ... ] \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e id: serializer.py class ClientViewSerializer(serializers.ModelSerializer): class Meta: model = Client fields = \"__all__\" views.py class ClientRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = Client.objects.all() serializer_class = ClientViewSerializer urls.py urlpatterns = [ ... path('client/<int:pk>/', ClientRUDAPIView.as_view()), ... ]","title":"Client"},{"location":"endpoint/client/#client","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e Client"},{"location":"endpoint/client/#_1","text":"models.py class Client(models.Model): legal_entity = models.CharField(max_length=60, verbose_name='\u042e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043b\u0438\u0446\u043e') contact_person = models.CharField(max_length=60, verbose_name='\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u043e\u0435 \u043b\u0438\u0446\u043e') phone_num = models.CharField(max_length=12, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430') email = models.EmailField(max_length=30, verbose_name='\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441') bank_details = models.CharField(max_length=30, verbose_name='\u0411\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u0438\u0435 \u0440\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u044b') def __str__(self): return \"{}-{}\".format(self.contact_person, self.legal_entity)","title":"\u041c\u043e\u0434\u0435\u043b\u044c:"},{"location":"endpoint/client/#legal_entity","text":"serializer.py class ClientViewSerializer(serializers.ModelSerializer): class Meta: model = Client fields = \"__all__\" views.py class ClientListAPIView(generics.ListAPIView): serializer_class = ClientViewSerializer def get_queryset(self): queryset = Client.objects.all() params = self.request.query_params legal_entity = params.get('legal_entity', None) if legal_entity: queryset = queryset.filter(legal_entity=legal_entity) return queryset urls.py urlpatterns = [ path('client/', ClientListAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432(\u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e legal_entity):"},{"location":"endpoint/client/#_2","text":"serializer.py class ClientCreateSerializer(serializers.Serializer): legal_entity = serializers.CharField(max_length=60) contact_person = serializers.CharField(max_length=60) phone_num = serializers.CharField(max_length=12) email = serializers.CharField(max_length=30) bank_details = serializers.CharField(max_length=30) def create(self, validated_data): client = Client(**validated_data) client.save() return Client(**validated_data) views.py class ClientCreateAPIView(generics.CreateAPIView): queryset = Client.objects.all() serializer_class = ClientCreateSerializer urls.py urlpatterns = [ ... path('client/create/', ClientCreateAPIView.as_view()), ... ]","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:"},{"location":"endpoint/client/#id","text":"serializer.py class ClientViewSerializer(serializers.ModelSerializer): class Meta: model = Client fields = \"__all__\" views.py class ClientRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = Client.objects.all() serializer_class = ClientViewSerializer urls.py urlpatterns = [ ... path('client/<int:pk>/', ClientRUDAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e id:"},{"location":"endpoint/executor/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e Executor \u041c\u043e\u0434\u0435\u043b\u044c: models.py class Executor(models.Model): full_name = models.CharField(max_length=50, verbose_name='\u0424\u0418\u041e') phone_num = models.CharField(max_length=12, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430') def __str__(self): return self.full_name \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439: serializer.py class ExecutorViewSerializer(serializers.ModelSerializer): class Meta: model = Executor fields = \"__all__\" views.py class ExecutorListAPIView(generics.ListAPIView): queryset = Executor.objects.all() serializer_class = ExecutorViewSerializer urls.py urlpatterns = [ ... path('executor/', ExecutorListAPIView.as_view()), ... ] \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f: serializer.py class ExecutorCreateSerializer(serializers.Serializer): full_name = serializers.CharField(max_length=50) phone_num = serializers.CharField(max_length=12) def create(self, validated_data): executor = Executor(**validated_data) executor.save() return Executor(**validated_data) views.py class ExecutorCreateAPIView(generics.CreateAPIView): queryset = Executor.objects.all() serializer_class = ExecutorCreateSerializer urls.py urlpatterns = [ ... path('executor/create/', ExecutorCreateAPIView.as_view()), ... ] \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f \u043f\u043e id: serializer.py class ExecutorViewSerializer(serializers.ModelSerializer): class Meta: model = Executor fields = \"__all__\" views.py class ExecutorRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = Executor.objects.all() serializer_class = ExecutorViewSerializer urls.py urlpatterns = [ ... path('executor/<int:pk>/', ExecutorRUDAPIView.as_view()), ... ]","title":"Executor"},{"location":"endpoint/executor/#executor","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e Executor"},{"location":"endpoint/executor/#_1","text":"models.py class Executor(models.Model): full_name = models.CharField(max_length=50, verbose_name='\u0424\u0418\u041e') phone_num = models.CharField(max_length=12, verbose_name='\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430') def __str__(self): return self.full_name","title":"\u041c\u043e\u0434\u0435\u043b\u044c:"},{"location":"endpoint/executor/#_2","text":"serializer.py class ExecutorViewSerializer(serializers.ModelSerializer): class Meta: model = Executor fields = \"__all__\" views.py class ExecutorListAPIView(generics.ListAPIView): queryset = Executor.objects.all() serializer_class = ExecutorViewSerializer urls.py urlpatterns = [ ... path('executor/', ExecutorListAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439:"},{"location":"endpoint/executor/#_3","text":"serializer.py class ExecutorCreateSerializer(serializers.Serializer): full_name = serializers.CharField(max_length=50) phone_num = serializers.CharField(max_length=12) def create(self, validated_data): executor = Executor(**validated_data) executor.save() return Executor(**validated_data) views.py class ExecutorCreateAPIView(generics.CreateAPIView): queryset = Executor.objects.all() serializer_class = ExecutorCreateSerializer urls.py urlpatterns = [ ... path('executor/create/', ExecutorCreateAPIView.as_view()), ... ]","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f:"},{"location":"endpoint/executor/#id","text":"serializer.py class ExecutorViewSerializer(serializers.ModelSerializer): class Meta: model = Executor fields = \"__all__\" views.py class ExecutorRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = Executor.objects.all() serializer_class = ExecutorViewSerializer urls.py urlpatterns = [ ... path('executor/<int:pk>/', ExecutorRUDAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f \u043f\u043e id:"},{"location":"endpoint/invoice/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e Invoice \u041c\u043e\u0434\u0435\u043b\u044c: models.py class Invoice(models.Model): req = models.ForeignKey('Request', verbose_name='\u0417\u0430\u044f\u0432\u043a\u0430', on_delete=models.CASCADE) client = models.ForeignKey('Client', verbose_name='\u041a\u043b\u0438\u0435\u043d\u0442', on_delete=models.CASCADE) pay_due = models.DateField(verbose_name='\u0421\u0440\u043e\u043a \u043f\u043b\u0430\u0442\u0435\u0436\u0430') def __str__(self): return \"{}-{}\".format(self.id, self.client.legal_entity) \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0441\u0447\u0435\u0442\u043e\u0432 \u043d\u0430 \u043e\u043f\u043b\u0430\u0442\u0443 (\u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e legal_entity): serializer.py class InvoiceViewNestedSerializer(serializers.ModelSerializer): req = RequestWStatusViewSerializer() client = ClientViewSerializer() class Meta: model = Invoice fields = \"__all__\" views.py class InvoiceListAPIView(generics.ListAPIView): serializer_class = InvoiceViewNestedSerializer def get_queryset(self): queryset = Invoice.objects.all() params = self.request.query_params legal_entity = params.get('legal_entity', None) if legal_entity: queryset = queryset.filter(client__legal_entity=legal_entity) return queryset urls.py urlpatterns = [ ... path('invoice/', InvoiceListAPIView.as_view()), ... ] \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u0430 \u043d\u0430 \u043e\u043f\u043b\u0430\u0442\u0443: serializer.py class InvoiceCreateSerializer(serializers.Serializer): client = serializers.PrimaryKeyRelatedField(queryset=Client.objects.all()) req = serializers.PrimaryKeyRelatedField(queryset=Request.objects.all()) pay_due = serializers.DateField() def create(self, validated_data): invoice = Invoice(**validated_data) invoice.save() return Invoice(**validated_data) views.py class InvoiceCreateAPIView(generics.CreateAPIView): queryset = Invoice.objects.all() serializer_class = InvoiceCreateSerializer urls.py urlpatterns = [ ... path('invoice/create/', InvoiceCreateAPIView.as_view()), ... ] \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u0430 \u043d\u0430 \u043e\u043f\u043b\u0430\u0442\u0443 \u043f\u043e id: serializer.py class InvoiceViewSerializer(serializers.ModelSerializer): class Meta: model = Invoice fields = \"__all__\" views.py class InvoiceRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = Invoice.objects.all() serializer_class = InvoiceViewSerializer urls.py urlpatterns = [ ... path('invoice/<int:pk>/', InvoiceRUDAPIView.as_view()), ... ]","title":"Invoice"},{"location":"endpoint/invoice/#invoice","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e Invoice"},{"location":"endpoint/invoice/#_1","text":"models.py class Invoice(models.Model): req = models.ForeignKey('Request', verbose_name='\u0417\u0430\u044f\u0432\u043a\u0430', on_delete=models.CASCADE) client = models.ForeignKey('Client', verbose_name='\u041a\u043b\u0438\u0435\u043d\u0442', on_delete=models.CASCADE) pay_due = models.DateField(verbose_name='\u0421\u0440\u043e\u043a \u043f\u043b\u0430\u0442\u0435\u0436\u0430') def __str__(self): return \"{}-{}\".format(self.id, self.client.legal_entity)","title":"\u041c\u043e\u0434\u0435\u043b\u044c:"},{"location":"endpoint/invoice/#legal_entity","text":"serializer.py class InvoiceViewNestedSerializer(serializers.ModelSerializer): req = RequestWStatusViewSerializer() client = ClientViewSerializer() class Meta: model = Invoice fields = \"__all__\" views.py class InvoiceListAPIView(generics.ListAPIView): serializer_class = InvoiceViewNestedSerializer def get_queryset(self): queryset = Invoice.objects.all() params = self.request.query_params legal_entity = params.get('legal_entity', None) if legal_entity: queryset = queryset.filter(client__legal_entity=legal_entity) return queryset urls.py urlpatterns = [ ... path('invoice/', InvoiceListAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0441\u0447\u0435\u0442\u043e\u0432 \u043d\u0430 \u043e\u043f\u043b\u0430\u0442\u0443 (\u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e legal_entity):"},{"location":"endpoint/invoice/#_2","text":"serializer.py class InvoiceCreateSerializer(serializers.Serializer): client = serializers.PrimaryKeyRelatedField(queryset=Client.objects.all()) req = serializers.PrimaryKeyRelatedField(queryset=Request.objects.all()) pay_due = serializers.DateField() def create(self, validated_data): invoice = Invoice(**validated_data) invoice.save() return Invoice(**validated_data) views.py class InvoiceCreateAPIView(generics.CreateAPIView): queryset = Invoice.objects.all() serializer_class = InvoiceCreateSerializer urls.py urlpatterns = [ ... path('invoice/create/', InvoiceCreateAPIView.as_view()), ... ]","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u0430 \u043d\u0430 \u043e\u043f\u043b\u0430\u0442\u0443:"},{"location":"endpoint/invoice/#id","text":"serializer.py class InvoiceViewSerializer(serializers.ModelSerializer): class Meta: model = Invoice fields = \"__all__\" views.py class InvoiceRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = Invoice.objects.all() serializer_class = InvoiceViewSerializer urls.py urlpatterns = [ ... path('invoice/<int:pk>/', InvoiceRUDAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u0430 \u043d\u0430 \u043e\u043f\u043b\u0430\u0442\u0443 \u043f\u043e id:"},{"location":"endpoint/materials_pl/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e MaterialsPL \u041c\u043e\u0434\u0435\u043b\u044c: models.py class MaterialsPL(models.Model): title = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430') description = models.CharField(max_length=150, verbose_name='\u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438') price = models.CharField(max_length=30, verbose_name='\u0426\u0435\u043d\u0430') def __str__(self): return self.title \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432: serializer.py class MaterialsPLViewSerializer(serializers.ModelSerializer): class Meta: model = MaterialsPL fields = \"__all__\" views.py class MaterialsPLListAPIView(generics.ListAPIView): queryset = MaterialsPL.objects.all() serializer_class = MaterialsPLViewSerializer urls.py urlpatterns = [ ... path('materialspl/', MaterialsPLListAPIView.as_view()), ... ] \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430: serializer.py class MaterialsPLCreateSerializer(serializers.Serializer): title = serializers.CharField(max_length=50) description = serializers.CharField(max_length=150) price = serializers.CharField(max_length=30) def create(self, validated_data): materials_pl = MaterialsPL(**validated_data) materials_pl.save() return MaterialsPL(**validated_data) views.py class MaterialsPLCreateAPIView(generics.CreateAPIView): queryset = MaterialsPL.objects.all() serializer_class = MaterialsPLCreateSerializer urls.py urlpatterns = [ ... path('materialspl/create/', MaterialsPLCreateAPIView.as_view()), ... ] \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430 \u043f\u043e id: serializer.py class MaterialsPLViewSerializer(serializers.ModelSerializer): class Meta: model = MaterialsPL fields = \"__all__\" views.py class MaterialsPLRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = MaterialsPL.objects.all() serializer_class = MaterialsPLViewSerializer urls.py urlpatterns = [ ... path('materialspl/<int:pk>/', MaterialsPLRUDAPIView.as_view()), ... ]","title":"MaterialsPL"},{"location":"endpoint/materials_pl/#materialspl","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e MaterialsPL"},{"location":"endpoint/materials_pl/#_1","text":"models.py class MaterialsPL(models.Model): title = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430') description = models.CharField(max_length=150, verbose_name='\u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438') price = models.CharField(max_length=30, verbose_name='\u0426\u0435\u043d\u0430') def __str__(self): return self.title","title":"\u041c\u043e\u0434\u0435\u043b\u044c:"},{"location":"endpoint/materials_pl/#_2","text":"serializer.py class MaterialsPLViewSerializer(serializers.ModelSerializer): class Meta: model = MaterialsPL fields = \"__all__\" views.py class MaterialsPLListAPIView(generics.ListAPIView): queryset = MaterialsPL.objects.all() serializer_class = MaterialsPLViewSerializer urls.py urlpatterns = [ ... path('materialspl/', MaterialsPLListAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432:"},{"location":"endpoint/materials_pl/#_3","text":"serializer.py class MaterialsPLCreateSerializer(serializers.Serializer): title = serializers.CharField(max_length=50) description = serializers.CharField(max_length=150) price = serializers.CharField(max_length=30) def create(self, validated_data): materials_pl = MaterialsPL(**validated_data) materials_pl.save() return MaterialsPL(**validated_data) views.py class MaterialsPLCreateAPIView(generics.CreateAPIView): queryset = MaterialsPL.objects.all() serializer_class = MaterialsPLCreateSerializer urls.py urlpatterns = [ ... path('materialspl/create/', MaterialsPLCreateAPIView.as_view()), ... ]","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430:"},{"location":"endpoint/materials_pl/#id","text":"serializer.py class MaterialsPLViewSerializer(serializers.ModelSerializer): class Meta: model = MaterialsPL fields = \"__all__\" views.py class MaterialsPLRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = MaterialsPL.objects.all() serializer_class = MaterialsPLViewSerializer urls.py urlpatterns = [ ... path('materialspl/<int:pk>/', MaterialsPLRUDAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430 \u043f\u043e id:"},{"location":"endpoint/payment_order/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e PaymentOrder \u041c\u043e\u0434\u0435\u043b\u044c: models.py class PaymentOrder(models.Model): req = models.ForeignKey('Request', verbose_name='\u0417\u0430\u044f\u0432\u043a\u0430', on_delete=models.CASCADE) client = models.ForeignKey('Client', verbose_name='\u041a\u043b\u0438\u0435\u043d\u0442', on_delete=models.CASCADE) invoice = models.ForeignKey('Invoice', verbose_name='\u0421\u0447\u0435\u0442 \u043d\u0430 \u043e\u043f\u043b\u0430\u0442\u0443', on_delete=models.CASCADE) pay_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b') \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u044b\u0445 \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u0439: serializer.py class PaymentOrderNestedSerializer(serializers.ModelSerializer): req = RequestWStatusViewSerializer() client = ClientViewSerializer() invoice = InvoiceViewSerializer() class Meta: model = PaymentOrder fields = \"__all__\" views.py class PaymentOrderListAPIView(generics.ListAPIView): queryset = PaymentOrder.objects.all() serializer_class = PaymentOrderNestedSerializer urls.py urlpatterns = [ ... path('paymentorder/', PaymentOrderListAPIView.as_view()), ... ] \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u044f: serializer.py class PaymentOrderCreateSerializer(serializers.Serializer): req = serializers.PrimaryKeyRelatedField(queryset=Request.objects.all()) client = serializers.PrimaryKeyRelatedField(queryset=Client.objects.all()) invoice = serializers.PrimaryKeyRelatedField(queryset=Invoice.objects.all()) pay_date = serializers.DateField() def create(self, validated_data): payment_order = PaymentOrder(**validated_data) payment_order.save() return PaymentOrder(**validated_data) views.py class PaymentOrderCreateAPIView(generics.CreateAPIView): queryset = PaymentOrder.objects.all() serializer_class = PaymentOrderCreateSerializer urls.py urlpatterns = [ ... path('paymentorder/create/', PaymentOrderCreateAPIView.as_view()), ... ] \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e id: serializer.py class PaymentOrderViewSerializer(serializers.ModelSerializer): class Meta: model = PaymentOrder fields = \"__all__\" views.py class PaymentOrderRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = PaymentOrder.objects.all() serializer_class = PaymentOrderViewSerializer urls.py urlpatterns = [ ... path('paymentorder/<int:pk>/', PaymentOrderRUDAPIView.as_view()), ... ]","title":"Payment Order"},{"location":"endpoint/payment_order/#paymentorder","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e PaymentOrder"},{"location":"endpoint/payment_order/#_1","text":"models.py class PaymentOrder(models.Model): req = models.ForeignKey('Request', verbose_name='\u0417\u0430\u044f\u0432\u043a\u0430', on_delete=models.CASCADE) client = models.ForeignKey('Client', verbose_name='\u041a\u043b\u0438\u0435\u043d\u0442', on_delete=models.CASCADE) invoice = models.ForeignKey('Invoice', verbose_name='\u0421\u0447\u0435\u0442 \u043d\u0430 \u043e\u043f\u043b\u0430\u0442\u0443', on_delete=models.CASCADE) pay_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b')","title":"\u041c\u043e\u0434\u0435\u043b\u044c:"},{"location":"endpoint/payment_order/#_2","text":"serializer.py class PaymentOrderNestedSerializer(serializers.ModelSerializer): req = RequestWStatusViewSerializer() client = ClientViewSerializer() invoice = InvoiceViewSerializer() class Meta: model = PaymentOrder fields = \"__all__\" views.py class PaymentOrderListAPIView(generics.ListAPIView): queryset = PaymentOrder.objects.all() serializer_class = PaymentOrderNestedSerializer urls.py urlpatterns = [ ... path('paymentorder/', PaymentOrderListAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u044b\u0445 \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u0439:"},{"location":"endpoint/payment_order/#_3","text":"serializer.py class PaymentOrderCreateSerializer(serializers.Serializer): req = serializers.PrimaryKeyRelatedField(queryset=Request.objects.all()) client = serializers.PrimaryKeyRelatedField(queryset=Client.objects.all()) invoice = serializers.PrimaryKeyRelatedField(queryset=Invoice.objects.all()) pay_date = serializers.DateField() def create(self, validated_data): payment_order = PaymentOrder(**validated_data) payment_order.save() return PaymentOrder(**validated_data) views.py class PaymentOrderCreateAPIView(generics.CreateAPIView): queryset = PaymentOrder.objects.all() serializer_class = PaymentOrderCreateSerializer urls.py urlpatterns = [ ... path('paymentorder/create/', PaymentOrderCreateAPIView.as_view()), ... ]","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u044f:"},{"location":"endpoint/payment_order/#id","text":"serializer.py class PaymentOrderViewSerializer(serializers.ModelSerializer): class Meta: model = PaymentOrder fields = \"__all__\" views.py class PaymentOrderRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = PaymentOrder.objects.all() serializer_class = PaymentOrderViewSerializer urls.py urlpatterns = [ ... path('paymentorder/<int:pk>/', PaymentOrderRUDAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u043e\u0433\u043e \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e id:"},{"location":"endpoint/request/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e Request \u041c\u043e\u0434\u0435\u043b\u044c: models.py class Request(models.Model): client = models.ForeignKey('Client', on_delete=models.CASCADE, verbose_name='\u0417\u0430\u043a\u0430\u0437\u0447\u0438\u043a') req_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u044f\u0432\u043a\u0438') workload = models.CharField(max_length=30, verbose_name='\u041e\u0431\u044a\u0435\u043c \u0440\u0430\u0431\u043e\u0442') final_price = models.CharField(max_length=30, verbose_name='\u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c') status_types = ( ('\u043d', '\u043d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043e'), ('\u043e', '\u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043e'), ) status = models.CharField(max_length=20, choices=status_types, verbose_name='\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435') def __str__(self): return \"{}-{}-{}\".format(self.id, self.client.legal_entity, self.req_date) \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0437\u0430\u044f\u0432\u043e\u043a( \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e status, from_date, to_date, legal_entity ): serializer.py class RequestWStatusViewSerializer(serializers.ModelSerializer): status = serializers.CharField(source=\"get_status_display\", read_only=True) class Meta: model = Request fields = \"__all__\" views.py class RequestListAPIView(generics.ListAPIView): serializer_class = RequestWStatusViewSerializer def get_queryset(self): queryset = Request.objects.all() params = self.request.query_params status = params.get('status', None) from_date = params.get('from_date', None) to_date = params.get('to_date', None) legal_entity = params.get('legal_entity', None) if status: queryset = queryset.filter(status=status) if from_date: queryset = queryset.filter(req_date__gte=from_date) if to_date: queryset = queryset.filter(req_date__lte=to_date) if legal_entity: queryset = queryset.filter(client__legal_entity=legal_entity) return queryset urls.py urlpatterns = [ ... path('request/', RequestListAPIView.as_view()), ... ] \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u044f\u0432\u043a\u0438: serializer.py class RequestCreateSerializer(serializers.Serializer): client = serializers.PrimaryKeyRelatedField(queryset=Client.objects.all()) req_date = serializers.DateField() workload = serializers.CharField(max_length=30) final_price = serializers.CharField(max_length=30) status = serializers.ChoiceField(choices=Request.status_types) def create(self, validated_data): request = Request(**validated_data) request.save() return Request(**validated_data) views.py class RequestCreateAPIView(generics.CreateAPIView): queryset = Request.objects.all() serializer_class = RequestCreateSerializer urls.py urlpatterns = [ ... path('request/create/', RequestCreateAPIView.as_view()), ... ] \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u044f\u0432\u043a\u0438 \u043f\u043e id: serializer.py class RequestViewSerializer(serializers.ModelSerializer): class Meta: model = Request fields = \"__all__\" views.py class RequestRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = Request.objects.all() serializer_class = RequestViewSerializer urls.py urlpatterns = [ ... path('request/<int:pk>/', RequestRUDAPIView.as_view()), ... ] \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0437\u0430\u044f\u0432\u043e\u043a \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c\u0438: serializer.py class RequestNestedSerializer(serializers.ModelSerializer): client = ClientViewSerializer() status = serializers.CharField(source=\"get_status_display\", read_only=True) class Meta: model = Request fields = \"__all__\" views.py class RequestNestedAPIView(generics.ListAPIView): queryset = Request.objects.all() serializer_class = RequestNestedSerializer urls.py urlpatterns = [ ... path('request/nested/', RequestNestedAPIView.as_view()), ... ]","title":"Request"},{"location":"endpoint/request/#request","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e Request"},{"location":"endpoint/request/#_1","text":"models.py class Request(models.Model): client = models.ForeignKey('Client', on_delete=models.CASCADE, verbose_name='\u0417\u0430\u043a\u0430\u0437\u0447\u0438\u043a') req_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u0437\u0430\u044f\u0432\u043a\u0438') workload = models.CharField(max_length=30, verbose_name='\u041e\u0431\u044a\u0435\u043c \u0440\u0430\u0431\u043e\u0442') final_price = models.CharField(max_length=30, verbose_name='\u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c') status_types = ( ('\u043d', '\u043d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043e'), ('\u043e', '\u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043e'), ) status = models.CharField(max_length=20, choices=status_types, verbose_name='\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435') def __str__(self): return \"{}-{}-{}\".format(self.id, self.client.legal_entity, self.req_date)","title":"\u041c\u043e\u0434\u0435\u043b\u044c:"},{"location":"endpoint/request/#status-from_date-to_date-legal_entity","text":"serializer.py class RequestWStatusViewSerializer(serializers.ModelSerializer): status = serializers.CharField(source=\"get_status_display\", read_only=True) class Meta: model = Request fields = \"__all__\" views.py class RequestListAPIView(generics.ListAPIView): serializer_class = RequestWStatusViewSerializer def get_queryset(self): queryset = Request.objects.all() params = self.request.query_params status = params.get('status', None) from_date = params.get('from_date', None) to_date = params.get('to_date', None) legal_entity = params.get('legal_entity', None) if status: queryset = queryset.filter(status=status) if from_date: queryset = queryset.filter(req_date__gte=from_date) if to_date: queryset = queryset.filter(req_date__lte=to_date) if legal_entity: queryset = queryset.filter(client__legal_entity=legal_entity) return queryset urls.py urlpatterns = [ ... path('request/', RequestListAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0437\u0430\u044f\u0432\u043e\u043a( \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e status, from_date, to_date, legal_entity):"},{"location":"endpoint/request/#_2","text":"serializer.py class RequestCreateSerializer(serializers.Serializer): client = serializers.PrimaryKeyRelatedField(queryset=Client.objects.all()) req_date = serializers.DateField() workload = serializers.CharField(max_length=30) final_price = serializers.CharField(max_length=30) status = serializers.ChoiceField(choices=Request.status_types) def create(self, validated_data): request = Request(**validated_data) request.save() return Request(**validated_data) views.py class RequestCreateAPIView(generics.CreateAPIView): queryset = Request.objects.all() serializer_class = RequestCreateSerializer urls.py urlpatterns = [ ... path('request/create/', RequestCreateAPIView.as_view()), ... ]","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u044f\u0432\u043a\u0438:"},{"location":"endpoint/request/#id","text":"serializer.py class RequestViewSerializer(serializers.ModelSerializer): class Meta: model = Request fields = \"__all__\" views.py class RequestRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = Request.objects.all() serializer_class = RequestViewSerializer urls.py urlpatterns = [ ... path('request/<int:pk>/', RequestRUDAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u044f\u0432\u043a\u0438 \u043f\u043e id:"},{"location":"endpoint/request/#_3","text":"serializer.py class RequestNestedSerializer(serializers.ModelSerializer): client = ClientViewSerializer() status = serializers.CharField(source=\"get_status_display\", read_only=True) class Meta: model = Request fields = \"__all__\" views.py class RequestNestedAPIView(generics.ListAPIView): queryset = Request.objects.all() serializer_class = RequestNestedSerializer urls.py urlpatterns = [ ... path('request/nested/', RequestNestedAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0437\u0430\u044f\u0432\u043e\u043a \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c\u0438:"},{"location":"endpoint/services_pl/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e ServicesPL \u041c\u043e\u0434\u0435\u043b\u044c: models.py class ServicesPL(models.Model): service_types = ( ('\u0443', '\u0443\u043b\u0438\u0447\u043d\u0430\u044f \u0440\u0435\u043a\u043b\u0430\u043c\u0430'), ('\u0438', '\u0440\u0435\u043a\u043b\u0430\u043c\u0430 \u0432 \u0438\u043d\u0442\u0435\u0440\u044c\u0435\u0440\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u043e\u043c\u0435\u0449\u0435\u043d\u0438\u044f'), ('\u0442', '\u0440\u0435\u043a\u043b\u0430\u043c\u0430 \u043d\u0430 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u0445'), ('\u043f', '\u043f\u0435\u0447\u0430\u0442\u043d\u0430\u044f \u0440\u0435\u043a\u043b\u0430\u043c\u0430'), ) service_type = models.CharField(max_length=20, choices=service_types, verbose_name='\u0412\u0438\u0434 \u0443\u0441\u043b\u0443\u0433\u0438') title = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u0441\u043b\u0443\u0433\u0438') price = models.CharField(max_length=30, verbose_name='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0443\u0441\u043b\u0443\u0433\u0438') def __str__(self): return self.title \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432(\u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e service_type): serializer.py class ServicesPLWTypeViewSerializer(serializers.ModelSerializer): service_type = serializers.CharField(source=\"get_service_type_display\", read_only=True) class Meta: model = ServicesPL fields = \"__all__\" views.py class ServicesPLListAPIView(generics.ListAPIView): serializer_class = ServicesPLWTypeViewSerializer def get_queryset(self): queryset = ServicesPL.objects.all() params = self.request.query_params service_type = params.get('service_type', None) if service_type: queryset = queryset.filter(service_type=service_type) return queryset urls.py urlpatterns = [ ... path('servicespl/', ServicesPLListAPIView.as_view()), ... ] \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0430: serializer.py class ServicesPLCreateSerializer(serializers.Serializer): title = serializers.CharField(max_length=50) price = serializers.CharField(max_length=30) service_type = serializers.ChoiceField(choices=ServicesPL.service_types) def create(self, validated_data): services_pl = ServicesPL(**validated_data) services_pl.save() return ServicesPL(**validated_data) views.py class ServicesPLCreateAPIView(generics.CreateAPIView): queryset = ServicesPL.objects.all() serializer_class = ServicesPLCreateSerializer urls.py urlpatterns = [ ... path('servicespl/create/', ServicesPLCreateAPIView.as_view()), ... ] \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u043f\u043e id: serializer.py class ServicesPLViewSerializer(serializers.ModelSerializer): class Meta: model = ServicesPL fields = \"__all__\" views.py class ServicesPLRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = ServicesPL.objects.all() serializer_class = ServicesPLViewSerializer urls.py urlpatterns = [ ... path('servicespl/<int:pk>/', ServicesPLRUDAPIView.as_view()), ... ]","title":"ServicePL"},{"location":"endpoint/services_pl/#servicespl","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e ServicesPL"},{"location":"endpoint/services_pl/#_1","text":"models.py class ServicesPL(models.Model): service_types = ( ('\u0443', '\u0443\u043b\u0438\u0447\u043d\u0430\u044f \u0440\u0435\u043a\u043b\u0430\u043c\u0430'), ('\u0438', '\u0440\u0435\u043a\u043b\u0430\u043c\u0430 \u0432 \u0438\u043d\u0442\u0435\u0440\u044c\u0435\u0440\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u043f\u043e\u043c\u0435\u0449\u0435\u043d\u0438\u044f'), ('\u0442', '\u0440\u0435\u043a\u043b\u0430\u043c\u0430 \u043d\u0430 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u0445'), ('\u043f', '\u043f\u0435\u0447\u0430\u0442\u043d\u0430\u044f \u0440\u0435\u043a\u043b\u0430\u043c\u0430'), ) service_type = models.CharField(max_length=20, choices=service_types, verbose_name='\u0412\u0438\u0434 \u0443\u0441\u043b\u0443\u0433\u0438') title = models.CharField(max_length=50, verbose_name='\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u0441\u043b\u0443\u0433\u0438') price = models.CharField(max_length=30, verbose_name='\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0443\u0441\u043b\u0443\u0433\u0438') def __str__(self): return self.title","title":"\u041c\u043e\u0434\u0435\u043b\u044c:"},{"location":"endpoint/services_pl/#service_type","text":"serializer.py class ServicesPLWTypeViewSerializer(serializers.ModelSerializer): service_type = serializers.CharField(source=\"get_service_type_display\", read_only=True) class Meta: model = ServicesPL fields = \"__all__\" views.py class ServicesPLListAPIView(generics.ListAPIView): serializer_class = ServicesPLWTypeViewSerializer def get_queryset(self): queryset = ServicesPL.objects.all() params = self.request.query_params service_type = params.get('service_type', None) if service_type: queryset = queryset.filter(service_type=service_type) return queryset urls.py urlpatterns = [ ... path('servicespl/', ServicesPLListAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432(\u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e service_type):"},{"location":"endpoint/services_pl/#_2","text":"serializer.py class ServicesPLCreateSerializer(serializers.Serializer): title = serializers.CharField(max_length=50) price = serializers.CharField(max_length=30) service_type = serializers.ChoiceField(choices=ServicesPL.service_types) def create(self, validated_data): services_pl = ServicesPL(**validated_data) services_pl.save() return ServicesPL(**validated_data) views.py class ServicesPLCreateAPIView(generics.CreateAPIView): queryset = ServicesPL.objects.all() serializer_class = ServicesPLCreateSerializer urls.py urlpatterns = [ ... path('servicespl/create/', ServicesPLCreateAPIView.as_view()), ... ]","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0430:"},{"location":"endpoint/services_pl/#id","text":"serializer.py class ServicesPLViewSerializer(serializers.ModelSerializer): class Meta: model = ServicesPL fields = \"__all__\" views.py class ServicesPLRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = ServicesPL.objects.all() serializer_class = ServicesPLViewSerializer urls.py urlpatterns = [ ... path('servicespl/<int:pk>/', ServicesPLRUDAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u043f\u043e id:"},{"location":"endpoint/work_group/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e WorkGroup \u041c\u043e\u0434\u0435\u043b\u044c: models.py class WorkGroup(models.Model): req = models.ForeignKey('Request', verbose_name='\u0417\u0430\u044f\u0432\u043a\u0430', on_delete=models.CASCADE) executor = models.ForeignKey('Executor', verbose_name='\u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c', on_delete=models.CASCADE) start_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b') end_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b') \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0433\u0440\u0443\u043f\u043f (\u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e req, executor, start_date, end_date ): serializer.py class WorkGroupWREViewSerializer(serializers.ModelSerializer): req = serializers.StringRelatedField(read_only=True) executor = serializers.StringRelatedField(read_only=True) class Meta: model = WorkGroup fields = \"__all__\" views.py class WorkGroupListAPIView(generics.ListAPIView): serializer_class = WorkGroupWREViewSerializer def get_queryset(self): queryset = WorkGroup.objects.all() params = self.request.query_params req = params.get('req', None) executor = params.get('executor', None) start_date = params.get('start_date', None) end_date = params.get('end_date', None) if req: queryset = queryset.filter(req=req) if executor: queryset = queryset.filter(executor=executor) if start_date: queryset = queryset.filter(start_date__gte=start_date) if end_date: queryset = queryset.filter(end_date__lte=end_date) return queryset urls.py urlpatterns = [ ... path('workgroup/', WorkGroupListAPIView.as_view()), ... ] \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0433\u0440\u0443\u043f\u043f\u044b: serializer.py class WorkGroupCreateSerializer(serializers.Serializer): executor = serializers.PrimaryKeyRelatedField(queryset=Executor.objects.all()) req = serializers.PrimaryKeyRelatedField(queryset=Request.objects.all()) start_date = serializers.DateField() end_date = serializers.DateField() def create(self, validated_data): work_group = WorkGroup(**validated_data) work_group.save() return WorkGroup(**validated_data) views.py class WorkGroupCreateAPIView(generics.CreateAPIView): queryset = WorkGroup.objects.all() serializer_class = WorkGroupCreateSerializer urls.py urlpatterns = [ ... path('workgroup/create/', WorkGroupCreateAPIView.as_view()), ... ] \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u043f\u043e id: serializer.py class WorkGroupViewSerializer(serializers.ModelSerializer): class Meta: model = WorkGroup fields = \"__all__\" views.py class WorkGroupRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = WorkGroup.objects.all() serializer_class = WorkGroupViewSerializer urls.py urlpatterns = [ ... path('workgroup/<int:pk>/', WorkGroupRUDAPIView.as_view()), ... ] \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0433\u0440\u0443\u043f\u043f \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c\u0438: serializer.py class WorkGroupNestedSerializer(serializers.ModelSerializer): req = RequestNestedSerializer() executor = ExecutorViewSerializer() class Meta: model = WorkGroup fields = \"__all__\" views.py class WorkGroupFullListAPIView(generics.ListAPIView): queryset = WorkGroup.objects.all() serializer_class = WorkGroupNestedSerializer urls.py urlpatterns = [ ... path('workgroup/full/', WorkGroupFullListAPIView.as_view()), ... ]","title":"Work Group"},{"location":"endpoint/work_group/#workgroup","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e WorkGroup"},{"location":"endpoint/work_group/#_1","text":"models.py class WorkGroup(models.Model): req = models.ForeignKey('Request', verbose_name='\u0417\u0430\u044f\u0432\u043a\u0430', on_delete=models.CASCADE) executor = models.ForeignKey('Executor', verbose_name='\u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c', on_delete=models.CASCADE) start_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b') end_date = models.DateField(verbose_name='\u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b')","title":"\u041c\u043e\u0434\u0435\u043b\u044c:"},{"location":"endpoint/work_group/#req-executor-start_date-end_date","text":"serializer.py class WorkGroupWREViewSerializer(serializers.ModelSerializer): req = serializers.StringRelatedField(read_only=True) executor = serializers.StringRelatedField(read_only=True) class Meta: model = WorkGroup fields = \"__all__\" views.py class WorkGroupListAPIView(generics.ListAPIView): serializer_class = WorkGroupWREViewSerializer def get_queryset(self): queryset = WorkGroup.objects.all() params = self.request.query_params req = params.get('req', None) executor = params.get('executor', None) start_date = params.get('start_date', None) end_date = params.get('end_date', None) if req: queryset = queryset.filter(req=req) if executor: queryset = queryset.filter(executor=executor) if start_date: queryset = queryset.filter(start_date__gte=start_date) if end_date: queryset = queryset.filter(end_date__lte=end_date) return queryset urls.py urlpatterns = [ ... path('workgroup/', WorkGroupListAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0433\u0440\u0443\u043f\u043f (\u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e req, executor, start_date, end_date):"},{"location":"endpoint/work_group/#_2","text":"serializer.py class WorkGroupCreateSerializer(serializers.Serializer): executor = serializers.PrimaryKeyRelatedField(queryset=Executor.objects.all()) req = serializers.PrimaryKeyRelatedField(queryset=Request.objects.all()) start_date = serializers.DateField() end_date = serializers.DateField() def create(self, validated_data): work_group = WorkGroup(**validated_data) work_group.save() return WorkGroup(**validated_data) views.py class WorkGroupCreateAPIView(generics.CreateAPIView): queryset = WorkGroup.objects.all() serializer_class = WorkGroupCreateSerializer urls.py urlpatterns = [ ... path('workgroup/create/', WorkGroupCreateAPIView.as_view()), ... ]","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0433\u0440\u0443\u043f\u043f\u044b:"},{"location":"endpoint/work_group/#id","text":"serializer.py class WorkGroupViewSerializer(serializers.ModelSerializer): class Meta: model = WorkGroup fields = \"__all__\" views.py class WorkGroupRUDAPIView(generics.RetrieveUpdateDestroyAPIView): queryset = WorkGroup.objects.all() serializer_class = WorkGroupViewSerializer urls.py urlpatterns = [ ... path('workgroup/<int:pk>/', WorkGroupRUDAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440/\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u043f\u043e id:"},{"location":"endpoint/work_group/#_3","text":"serializer.py class WorkGroupNestedSerializer(serializers.ModelSerializer): req = RequestNestedSerializer() executor = ExecutorViewSerializer() class Meta: model = WorkGroup fields = \"__all__\" views.py class WorkGroupFullListAPIView(generics.ListAPIView): queryset = WorkGroup.objects.all() serializer_class = WorkGroupNestedSerializer urls.py urlpatterns = [ ... path('workgroup/full/', WorkGroupFullListAPIView.as_view()), ... ]","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0433\u0440\u0443\u043f\u043f \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c\u0438:"}]}